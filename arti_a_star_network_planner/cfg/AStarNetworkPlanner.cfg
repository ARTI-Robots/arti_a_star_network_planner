#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
from os.path import abspath, basename, dirname, splitext

import math

PACKAGE = basename(dirname(dirname(abspath(__file__))))

gen = ParameterGenerator()

gen.add("corridor_width",                 double_t, 0, "X and Y limit at along the path", 1.0, 0.0, 10.0)
gen.add("max_number_increases",           int_t,    0, "Maximum times for increasing an edge's network costs if a plan at that edge fails", 100, 0, 1000)
gen.add("increase_factor",                double_t, 0, "The factor of increasing an edge's network costs if a plan at that edge fails", 2.0, 0.0, 10.0)
gen.add("edge_cost_validity_period_s",    double_t, 0, "The time after which an increased edge network costs is expired", 100.0, 0.0, 1000.0)
gen.add("edge_cost_reset_check_period_s", double_t, 0, "The time period where to check if an increased edge network cost has expired and to reset it", 1.0, 0.0, 10.0)
gen.add("bidirectional_drive",            bool_t,   0, "If enabled, driving in both directions on the graph is allowed (the initial driving direction still remains and depends on the start orientation compared to the direction to the first node). If disabled, the graph is always driven in forward direction.", False)
gen.add("skip_network_if_close",          bool_t,   0, "If enabled, optimizations will be done to skip the network (at the beginning, end or fully). The optimization depend on the other parameters.", False)
gen.add("skip_network_path_length",       double_t, 0, "Up until this original path length optimizations can be done to skip (parts of) the network", 1.0, 0.0, 50.0)
gen.add("max_nodes_to_skip",              int_t,    0, "Up until this maximum nodes optimizations can be done to skip (parts of) the network", 1, 0, 1000)
gen.add("theta_limit",                    double_t, 0, "Theta limits for the trajectory points (rad)", math.pi/4., 0.0, 10.0)
gen.add("interpolate_graph",              bool_t,   0, "If enabled, nodes will be added to the graph to conform to the max_edge_distance, this will not be saved to the loaded file!", True)
gen.add("max_edge_distance",              double_t, 0, "Distance limits (in meter) for the path poses, if the distance between two nodes is larger, than this value one or more nodes will be added.", 9.5, 0.1, 100.0)
gen.add("interpolate_resulting_path",     bool_t,   0, "If enabled, points in the resulting path will be added to conform to the max_edge_interpolation distance", False)
gen.add("max_path_distance",              double_t, 0, "Distance limit (in meter) for the path poses, if the distance between two poses is larger, than this value one or more poses will be added.", 9.5, 0.1, 100.0)

exit(gen.generate(PACKAGE, PACKAGE + "_node", splitext(basename(__file__))[0]))
